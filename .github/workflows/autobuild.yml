name: Build_x86_64

on: 
  repository_dispatch:
  workflow_dispatch:

jobs:
  Build_x86_64:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch unzip lib32gcc1 libc6-dev-i386 subversion flex node-uglify gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils  libelf-dev autoconf automake libtool autopoint device-tree-compiler libuv-dev python3.6 zlib1g-dev upx-ucl node-uglify antlr3 gperf wget swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Server Benchmark
      run: |
        wget -qO- --no-check-certificate https://raw.githubusercontent.com/Kurokosama/serverbench/main/bench.sh | bash
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        cd "/home/runner"
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        sudo chown -R runner:runner "openwrt"
        cd "/home/runner/openwrt"
        echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
    - name: Build_x86_64
      run: |
        cd "/home/runner/openwrt"
        cp -f "${GITHUB_WORKSPACE}/configs/x86_64.config" ".config"
        chmod +x ./customize.sh && ./customize.sh
        make defconfig
        make -j$[$(nproc)+1]
    - name: Prepare Files
      run: |
        cd "/home/runner/openwrt"
        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img" "../openwrt-x86-64-generic-squashfs-combined.img"
        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.vmdk" "../openwrt-x86-64-generic-squashfs-combined.vmdk"
#        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img" "../openwrt-x86-64-generic-squashfs-combined-efi.img"
#        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.vmdk" "../openwrt-x86-64-generic-squashfs-combined-efi.vmdk"

    - name: Prepare Release Zip File
      id: assemble_artifact
      run: |
        cd "/home/runner"
        zip OpenWrt-X86_64.zip openwrt-x86-64-generic-squashfs-combined.img openwrt-x86-64-generic-squashfs-combined.vmdk
        release_tag="X86_64-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name: Build ${{ steps.assemble_artifact.outputs.release_tag }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/OpenWrt-X86_64.zip
        asset_name: OpenWrt-X86_64.zip
        asset_content_type: application/zip
    - name : Upload Artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt(Download This or Go to Release Page)
        path: /home/runner/openwrt/bin

